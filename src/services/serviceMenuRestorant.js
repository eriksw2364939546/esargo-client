// serviceMenuRestorant.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

const _API_URL = process.env.NEXT_PUBLIC_API_URL;
import axios from 'axios';

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –ø–æ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
export const getMenuByRestaurantId = async (id, options = {}) => {
	try {
		if (!_API_URL) {
			throw new Error('API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
		}

		const queryParams = new URLSearchParams({
			include_unavailable: true,
			...options
		}).toString();

		// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ /api
		const url = `${_API_URL}/public/restaurants/${id}/menu?${queryParams}`;
		console.log('üçΩÔ∏è Fetching menu from:', url);

		const res = await fetch(url);
		const data = await res.json();

		console.log('Menu response status:', res.status);
		console.log('Menu response data:', data);

		if (!res.ok || !data.success) {
			throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é");
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º items –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é
		const menuItems = data.data?.menu?.flatMap((category) => category.items) || [];
		console.log('Menu items extracted:', menuItems.length);
		return menuItems;
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é:', error);
		throw error;
	}
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–æ –ø–æ ID
export const getMenuItemById = async (id) => {
	try {
		if (!_API_URL) {
			throw new Error('API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
		}

		console.log('üçï Fetching item with ID:', id);
		
		// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ /api
		const url = `${_API_URL}/public/menu/item/${id}`;
		console.log('Menu item URL:', url);

		const res = await fetch(url);
		const data = await res.json();

		console.log('Menu item response status:', res.status);
		console.log('Menu item response data:', data);

		if (!res.ok || !data.success) {
			throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª—é–¥–∞");
		}

		// üëà –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ö–û–î: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ item –∏ similar_items
		return {
			item: data.data.item,
			similar_items: data.data.similar_items
		};
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª—é–¥–∞:', error);
		throw error;
	}
};