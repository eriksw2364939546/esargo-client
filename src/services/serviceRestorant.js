// serviceRestorant.js - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –°–û –í–°–ï–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò

const _API_URL = process.env.NEXT_PUBLIC_API_URL;

// üîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
console.log('=== API URL DEBUG ===');
console.log('NEXT_PUBLIC_API_URL:', process.env.NEXT_PUBLIC_API_URL);
console.log('Expected format: http://localhost:5000/api');
console.log('====================');

if (!_API_URL) {
	console.error('‚ùå NEXT_PUBLIC_API_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!');
	console.log('–î–æ–±–∞–≤—å—Ç–µ –≤ .env.local: NEXT_PUBLIC_API_URL=http://localhost:5000/api');
}

// ‚úÖ –û–¢–õ–ê–î–û–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
export const debugApiUrl = () => {
	console.log('=== API DEBUG INFO ===');
	console.log('Current API URL:', _API_URL);
	console.log('Expected catalog URL:', `${_API_URL}/public/catalog`);
	console.log('Expected restaurant URL:', `${_API_URL}/public/restaurants/[id]`);
	console.log('======================');
};

// ‚úÖ –¢–ï–°–¢–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const testApiConnection = async () => {
	try {
		console.log('üîó Testing API connection...');
		const testUrl = `${_API_URL}/public/catalog?limit=1`;
		console.log('Test URL:', testUrl);
		
		const response = await fetch(testUrl);
		console.log('Test response status:', response.status);
		
		if (response.ok) {
			const data = await response.json();
			console.log('‚úÖ API connection successful!');
			return { success: true, data };
		} else {
			console.error('‚ùå API connection failed:', response.status);
			const errorText = await response.text();
			console.error('Error response:', errorText);
			return { success: false, status: response.status, error: errorText };
		}
	} catch (error) {
		console.error('‚ùå API connection error:', error);
		return { success: false, error: error.message };
	}
};

// ‚úÖ –û–¢–õ–ê–î–û–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
export const debugRestaurantRequest = async (id) => {
	console.log('=== DEBUG RESTAURANT REQUEST ===');
	console.log('Input ID:', id);
	console.log('API_URL:', _API_URL);
	console.log('Is ObjectId format:', /^[0-9a-fA-F]{24}$/.test(id));
	
	if (!_API_URL) {
		console.error('API_URL is not defined!');
		return { error: 'API_URL not configured' };
	}
	
	try {
		// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ /api
		const url = `${_API_URL}/public/restaurants/${id}?include_menu=false`;
		console.log('Full URL:', url);
		
		const response = await fetch(url, {
			method: 'GET',
			headers: { 
				'Content-Type': 'application/json',
				'Accept': 'application/json'
			},
		});
		
		console.log('Response status:', response.status);
		console.log('Response ok:', response.ok);
		console.log('Response headers:', Object.fromEntries(response.headers.entries()));
		
		const text = await response.text();
		console.log('Raw response length:', text.length);
		console.log('Raw response first 500 chars:', text.substring(0, 500));
		
		if (!response.ok) {
			console.error('HTTP Error:', response.status, response.statusText);
			return { error: `HTTP ${response.status}: ${response.statusText}`, raw: text };
		}
		
		try {
			const json = JSON.parse(text);
			console.log('Parsed JSON success:', !!json.success);
			console.log('Restaurant found:', !!json.data?.restaurant);
			return json;
		} catch (parseError) {
			console.error('JSON parse error:', parseError);
			return { error: 'Invalid JSON response', raw: text };
		}
	} catch (error) {
		console.error('Fetch error:', error);
		return { error: error.message };
	}
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ ID (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–∏—Å–∫–∞)
export const getRestaurantById = async (id, includeMenu = true) => {
	try {
		if (!_API_URL) {
			console.error('API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_API_URL');
			throw new Error('API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env');
		}

		console.log('Fetching restaurant with ID:', id);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ id MongoDB ObjectId (24 —Å–∏–º–≤–æ–ª–∞ hex)
		const isObjectId = /^[0-9a-fA-F]{24}$/.test(id);
		console.log('Is valid ObjectId:', isObjectId);

		let url;
		let response;
		let data;

		if (isObjectId) {
			// –ï—Å–ª–∏ —ç—Ç–æ ObjectId, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
			// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ /api
			url = `${_API_URL}/public/restaurants/${id}?include_menu=${includeMenu}`;
			console.log('Request URL (ObjectId):', url);

			response = await fetch(url, {
				method: 'GET',
				headers: { 
					'Content-Type': 'application/json',
					'Accept': 'application/json'
				},
			});

			console.log('Response status:', response.status);
			console.log('Response ok:', response.ok);
			console.log('Response statusText:', response.statusText);

			if (!response.ok) {
				const errorText = await response.text();
				console.error('API Error Response Text:', errorText);
				
				try {
					const error = JSON.parse(errorText);
					console.error('API Error JSON:', error);
					throw new Error(error.message || `–†–µ—Å—Ç–æ—Ä–∞–Ω —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω (${response.status})`);
				} catch (parseError) {
					console.error('Failed to parse error response:', parseError);
					throw new Error(`–†–µ—Å—Ç–æ—Ä–∞–Ω —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω (${response.status}). Raw response: ${errorText.substring(0, 200)}`);
				}
			}

			const responseText = await response.text();
			console.log('Success response text length:', responseText.length);
			
			try {
				data = JSON.parse(responseText);
				console.log('Parsed response data:', data);
			} catch (parseError) {
				console.error('Failed to parse success response:', parseError);
				console.error('Response text:', responseText.substring(0, 500));
				throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
			}

			return data;
		} else {
			// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ ObjectId, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫
			console.log('Using search for non-ObjectId:', id);
			// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
			url = `${_API_URL}/public/search?q=${encodeURIComponent(id)}`;
			console.log('Request URL (Search):', url);

			response = await fetch(url, {
				method: 'GET',
				headers: { 
					'Content-Type': 'application/json',
					'Accept': 'application/json'
				},
			});

			if (!response.ok) {
				const error = await response.json().catch(() => ({}));
				console.error('API Error:', error);
				throw new Error(error.message || `–†–µ—Å—Ç–æ—Ä–∞–Ω —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω (${response.status})`);
			}

			data = await response.json();
			console.log('Search response data:', data);

			// –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
			if (data.success && data.data && data.data.restaurants && data.data.restaurants.length > 0) {
				const exactMatch = data.data.restaurants.find(restaurant => 
					restaurant.id_name === id || 
					restaurant._id === id ||
					restaurant.name.toLowerCase() === id.toLowerCase()
				);

				if (exactMatch) {
					// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
					return {
						success: true,
						data: { restaurant: exactMatch }
					};
				} else {
					// –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
					return {
						success: true,
						data: { restaurant: data.data.restaurants[0] }
					};
				}
			} else {
				throw new Error(`–†–µ—Å—Ç–æ—Ä–∞–Ω —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
			}
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:', error);
		console.error('Error stack:', error.stack);
		
		// –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
		if (error.name === 'TypeError' && error.message.includes('fetch')) {
			throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.');
		}
		
		throw error;
	}
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
export const getAllRestaurants = async (params = {}) => {
	try {
		if (!_API_URL) {
			console.error('API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_API_URL');
			throw new Error('API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env');
		}

		const queryParams = new URLSearchParams();

		Object.entries(params).forEach(([key, value]) => {
			if (value !== undefined && value !== null && value !== '') {
				queryParams.append(key, value);
			}
		});

		// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ /api
		const url = `${_API_URL}/public/catalog${queryParams.toString() ? `?${queryParams}` : ''}`;
		console.log('Fetching restaurants from:', url);

		const response = await fetch(url, {
			method: 'GET',
			headers: { 
				'Content-Type': 'application/json',
				'Accept': 'application/json'
			},
		});

		console.log('getAllRestaurants response status:', response.status);

		if (!response.ok) {
			const error = await response.json().catch(() => ({}));
			console.error('getAllRestaurants API Error:', error);
			throw new Error(error.message || `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (${response.status})`);
		}

		const data = await response.json();
		console.log('getAllRestaurants response data:', data);

		// ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
		return {
			success: data.result || false,
			data: {
				restaurants: data.data || [],
				pagination: data.pagination || {},
				total_found: data.total_found || 0
			},
			message: data.message
		};
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:', error);
		
		// –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
		if (error.name === 'TypeError' && error.message.includes('fetch')) {
			throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.');
		}
		
		throw error;
	}
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∏—Å–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
export const searchRestaurants = async (query, params = {}) => {
	try {
		if (!_API_URL) {
			throw new Error('API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
		}

		const queryParams = new URLSearchParams({ q: query });

		Object.entries(params).forEach(([key, value]) => {
			if (value !== undefined && value !== null && value !== '') {
				queryParams.append(key, value);
			}
		});

		// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
		const response = await fetch(`${_API_URL}/public/search?${queryParams}`);

		if (!response.ok) {
			const error = await response.json().catch(() => ({}));
			throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤');
		}

		return await response.json();
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:', error);
		throw error;
	}
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ –ø–æ—á—Ç–æ–≤–æ–º—É –∏–Ω–¥–µ–∫—Å—É
export const getRestaurantsByPostalCode = async (postalCode, params = {}) => {
	try {
		if (!_API_URL) {
			throw new Error('API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
		}

		const queryParams = new URLSearchParams();

		Object.entries(params).forEach(([key, value]) => {
			if (value !== undefined && value !== null && value !== '') {
				queryParams.append(key, value);
			}
		});

		// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ /api (–µ—Å–ª–∏ —Ç–∞–∫–æ–π endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
		const url = `${_API_URL}/public/restaurants/by-postal-code/${postalCode}${queryParams.toString() ? `?${queryParams}` : ''}`;
		const response = await fetch(url);

		if (!response.ok) {
			const error = await response.json().catch(() => ({}));
			throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É');
		}

		return await response.json();
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É:', error);
		throw error;
	}
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –ø–æ ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
export const getMenuByRestaurantId = async (id, options = {}) => {
	try {
		if (!_API_URL) {
			throw new Error('API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
		}

		const queryParams = new URLSearchParams({
			include_unavailable: true,
			...options
		}).toString();

		// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –º–µ–Ω—é
		const res = await fetch(`${_API_URL}/public/restaurants/${id}/menu?${queryParams}`);
		const data = await res.json();

		if (!res.ok || !data.success) {
			throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é");
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º items –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é
		const menuItems = data.data?.menu?.flatMap((category) => category.items) || [];
		return menuItems;
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é:', error);
		throw error;
	}
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–æ –ø–æ ID
export const getMenuItemById = async (id) => {
	try {
		if (!_API_URL) {
			throw new Error('API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
		}

		console.log('Fetching item with ID:', id);
		// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª—é–¥–∞
		const url = `${_API_URL}/public/menu/item/${id}`;
		console.log('API URL:', url);

		const res = await fetch(url);
		const data = await res.json();

		if (!res.ok || !data.success) {
			throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª—é–¥–∞");
		}

		return {
			item: data.data.item,
			similar_items: data.data.similar_items
		};
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª—é–¥–∞:', error);
		throw error;
	}
};